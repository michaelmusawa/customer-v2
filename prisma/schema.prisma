// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String?
  email                  String     @unique
  password               String?
  emailVerified          DateTime?
  role                   String?
  status                 String?
  image                  String?
  token                   String?
  shiftId           Int?             
  shift             Shift?           @relation(fields: [shiftId], references: [id])
  
  counterId         Int?             
  counter           Counter?         @relation(fields: [counterId], references: [id])
  
  stationId         Int?             
  station           Station?         @relation(fields: [stationId], references: [id])
  records                Record[]
  editRecordsAsBiller EditedRecord[] @relation("BillerRelation")
  editRecordsAsSupervisor EditedRecord[] @relation("SupervisorRelation")
  accounts               Account[]
  sessions               Session[] 
  resetToken    String?     @map("password_reset_token")
  resetExpires  DateTime?   @map("password_reset_expires")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime?  @updatedAt
}

model Record {
  id           Int           @id @default(autoincrement())
  ticket       String
  recordType   String?
  name         String
  service      String
  subService   String?
  recordNumber String?
  value        Int
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: NoAction)
  editRecords  EditedRecord[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt

  @@map("records")
}


model EditedRecord {
   id            Int      @id @default(autoincrement())
  recordId          Int
  record            Record   @relation(fields: [recordId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket            String
  recordType        String?
  name              String
  service           String
  subService        String?
  recordNumber      String
  value             Int
  reason            String?
  comment           String?
  status            String?
  billerId          Int
  supervisorId      Int?
  biller            User     @relation("BillerRelation", fields: [billerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisor        User?    @relation("SupervisorRelation", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Station {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  createdAt DateTime @default(now()) @map("created_at")

  // add this:
  shifts    Shift[] 

  users     User[]  // existing back‑relation

  @@map("stations")
}

model Shift {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  createdAt  DateTime @default(now()) @map("created_at")

  // NEW: each shift belongs to exactly one station
  stationId  Int
  station    Station  @relation(fields: [stationId], references: [id])

  // NEW: each shift can have many counters
  counters   Counter[]

  users      User[]   // existing back‑relation

  @@map("shifts")
}

model Counter {
  id         Int      @id @default(autoincrement())
  name       String   
  createdAt  DateTime @default(now()) @map("created_at")

  // NEW: each counter belongs to exactly one shift
  shiftId    Int
  shift      Shift    @relation(fields: [shiftId], references: [id])

  users      User[]   // existing back‑relation

  @@unique([shiftId, name])

  @@map("counters")
}


model Service {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  createdAt  DateTime      @default(now()) @map("created_at")
  subservices Subservice[]

  @@map("services")
}

model Subservice {
  id          Int       @id @default(autoincrement())
  serviceId   Int       @map("service_id")
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([serviceId, name])
  @@map("subservices")
}


