generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String?
  email                  String     @unique
  password               String?
  emailVerified          DateTime?
  role                   String?
  status                 String?
  image                  String?
  token                  String?    // invitation/reset token
  shiftId                Int?
  shift     Shift?   @relation(fields: [shiftId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  counterId              Int?
  counter   Counter? @relation(fields: [counterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stationId              Int?
  station   Station? @relation(fields: [stationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  records                Record[]   @relation("RecordUser")
  editRecordsAsBiller    EditedRecord[] @relation("BillerRelation")
  editRecordsAsSupervisor EditedRecord[] @relation("SupervisorRelation")
  accounts               Account[]
  sessions               Session[]
  resetToken             String?    @map("password_reset_token")
  resetExpires           DateTime?  @map("password_reset_expires")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime?  @updatedAt

  @@map("User")
}

model Record {
  id           Int           @id @default(autoincrement())
  ticket       String
  recordType   String?
  name         String
  service      String
  subService   String?
  recordNumber String?
  value        Int
  userId       Int
  user         User          @relation("RecordUser", fields: [userId], references: [id], onDelete: NoAction)
  editRecords  EditedRecord[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt

  @@map("records")
}

model EditedRecord {
  id            Int      @id @default(autoincrement())
  recordId      Int
  record        Record   @relation(fields: [recordId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket        String
  recordType    String?
  name          String
  service       String
  subService    String?
  recordNumber  String
  value         Int
  reason        String?
  comment       String?
  status        String?
  billerId      Int
  supervisorId  Int?
  biller        User     @relation("BillerRelation", fields: [billerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisor    User?    @relation("SupervisorRelation", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("EditedRecord")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([provider, providerAccountId])
  @@map("Account")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("VerificationToken")
}

model Station {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  shifts    Shift[]
  users     User[]

  @@map("stations")
}

model Shift {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now()) @map("created_at")
  stationId  Int
  station    Station  @relation(fields: [stationId], references: [id])
  counters   Counter[]
  users      User[]

  @@unique([stationId, name])
  @@map("shifts")
}

model Counter {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now()) @map("created_at")
  shiftId    Int
  shift      Shift    @relation(fields: [shiftId], references: [id])
  users      User[]

  @@unique([shiftId, name])
  @@map("counters")
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  subservices Subservice[]

  @@map("services")
}

model Subservice {
  id         Int       @id @default(autoincrement())
  serviceId  Int       @map("service_id")
  service    Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  name       String
  createdAt  DateTime  @default(now()) @map("created_at")

  @@unique([serviceId, name])
  @@map("subservices")
}
